- name: Update packages
  apt:
    upgrade: dist

- name: Install dependencies
  action: apt pkg={{item}} state=installed
  with_items:
       - git
       - curl
       - facter
       - iptables
       - iptables-persistent
       - nginx

- name: download a decent version of nodejs
  shell: curl -sSL https://deb.nodesource.com/setup_6.x | bash -

- name: install a decent version of nodejs and npm
  action: apt pkg=nodejs state=installed

- name: add yarn debian key
  shell: curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -

- name: add yarn to apt-source
  shell: echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list

- name: install yarn
  action: apt update_cache=yes pkg=yarn state=installed

- name: generate iptables rules ipb4
  template: src=iptables.j2 dest=/etc/iptables/rules.v4
  notify:
      - restart iptables-persistent

- name: generate iptables rules ipv6
  template: src=ip6tables.j2 dest=/etc/iptables/rules.v6
  notify:
      - restart iptables-persistent

- name: configure nginx
  template: src=nginx.j2 dest=/etc/nginx/sites-enabled/poc
  notify:
      - restart nginx

- name: Install Docker
  shell: curl -sSL https://get.docker.com/ | sh

- name: Install Docker-compose
  shell: curl -L "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-`uname -s`-`uname -m`" > /usr/local/bin/docker-compose

- name: chmod docker-compose
  shell: chmod +x /usr/local/bin/docker-compose

- git:
    repo: https://github.com/CaliOpen/Caliopen.git 
    dest: "{{ install_dir }}"

- name: Build Docker Services
  shell: docker-compose build  
  args:
    chdir: "{{ devtools_dir }}"

- name: Docker up redis cassandra elasticsearch
  shell: docker-compose up -d redis cassandra elasticsearch 
  args:
    chdir: "{{ devtools_dir }}"

- name: Setup storage
  shell: docker-compose run cli setup
  args:
    chdir: "{{ devtools_dir }}"

- name: Create a Caliopen user
  shell: docker-compose run cli create_user -e {{ db_user }} -p {{ db_password }}
  args:
    chdir: "{{ devtools_dir }}"
  register: command_result
  failed_when: "'Username already exist' in command_result.stderr"
  ignore_errors: True


- name: Import datas
  shell: docker-compose run cli import -e dev@caliopen.local -f mbox -p devtools/fixtures/mbox/dev@caliopen.local
  args:
    chdir: "{{ devtools_dir }}"
  register: command_result
  failed_when: "'Error' in command_result.stderr"
  ignore_errors: True


- name: Start API
  shell: docker-compose up -d api
  args:
    chdir: "{{ devtools_dir }}"

- name: Start Frontend
  shell: docker-compose up -d frontend
  args:
    chdir: "{{ devtools_dir }}"

- name: reload correct iptables chains after docker startup
  action: netfilter-persistent flush && netfilter-persistent restart